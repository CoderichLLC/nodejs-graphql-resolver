Release 0.13:
  ** There is a potential race condition/issue when using $magic methods... I'm seeing Transaction committed/aborted messages when using them in nested transactions
    - DO NOT USE THEM YET!!!

  ** I believe there is a race condition when performing Emitter methods (in parallel) and the value of "merged"... (I didn't finish my thought)

  * "validate" pipeline should allow modification if user really wants to
  * Sort by name (name.en) does not work
    - I believe the transformations on where + sort are not accurate
  * Atlas Search Support
    - How to modify the query?
  * Do we support input meta?
  * Schema.merge - what is the order of priority and do we need to specify it as a param (passive?)

Release 0.14:
  * Remove deprecations
  * Break up Schema monolith (schema.parse() usage)
  * $field.linkBy & $field.fkField are pointing to the same value; can they be consolidated?

Known Issues:
  * Schema/Resolver not capable of handling intersection tables (eg. TST Audience/Contact)
  * MongoClient - not all queries (mutations) go through $aggregateQuery and so you lose things like $project the result
  * You only need to $addFields for mongo regex when it's not already a String (eg. Boolean)
  * Tests overhaul
    - Need to make sure that Scalar @field() is working
    - Failing tests are blowing up due to Jest and Circular Reference
  * .flags({ debug: true })
    - You will never see debug info when the result is cached and no driver called
    - query.flags.debug should not be at driver level
    - debug flag is not always propagated (findMany, pullMany, etc)

Improvement Considerations:
  * Proxy transformations
  * Resolver.graphql()
    - This requires executableSchema...
  * Ability to trigger validation?
  * onDelete defer - could probably be done dynamically instead?
  * Easy select('a b c d') syntax
    - GraphQL API passes in .args() and only selects what it needs.... is this ok for DataLoader Cache?
    - I disabled it... when selecting "count" only there are problems
  * Can you derive transaction support by virtue of function definition existing?
  * Ability to override models' terminal commands (eg. one(), many())?
  * There are times you may NOT want resolver to CRUD an attribute
    - eg. NetworkPlace.parent should be set via meta because of side-effects
  * Upsert???
  * EventEmitter
    - Debounce a function (debounce) to prevent excessive/redundant calls?
    - Memoize a function to prevent excessive/redundant calls?
  * Why do you send `${model}` in query instead of the actual model object?
    - I "think" this is because you clone query and it's better/faster to clone a string
  * You need proper events on embedded documents so that "construct": "createdBy" would work!
  * config.dataSources to determine if supports
    - Joins
    - Transactions
    - Batches
    - Referential Integrity (no need to ensureId)
    - Composite index keys (probably need to move these tests elsewhere)
  * Allow @field(path: "some.path") in order to hoist
  * Support for GUID (node interface)
    - autograph.legacyMode (move to config)

BREAKING CHANGELOG:
  * You MUST NOT mutate the response from resolver without understanding that it's also cached!
  * PageInfo and cursor no longer required schema (only defined when cursorPaginating...)
  * Revamped how transactions work
  * Revamped how initial setup works (config.js)
    - makeExecutableSchema
  * Revamped Pipeline { schema, context, resolver, query, model, field, value, path, startValue }
    - No more pipeline on database result! (check transform/normalize, deserialize)
    - Pipeline "toId" is completely removed (use custom "toObjectId" Pipeline etc)
    - Removed Pipelines [transform, deserialize, destruct]
      - transform -> normalize
  * Revamped Emitter { schema, context, resolver, query { args, id, model, crud, key, doc, input, sort, result } }
    - "Basic" functions are hoisted to the top for execution; RETURNING a value will bypass thunk()
    - "Next" functions are run next, next() must ALWAYS be called; passing a value to next() will bypass thunk()
    - Event arguments refactored (no more merged! use query.input)
  * Emitter.on('setup') is passed the "parsedSchema" object
  * No more gqlScope, dalScope, fieldScope (use crud + scope)
  * resolver.resolve() now takes 1 argument (info) and requires you to use .args() etc if need be
  * $Magic methods now have signature doc.$.<method> and are more powerful and chainable
  * Resolver now sets itself at context.autograph (configurable)
  * createNamedQuery is replaced by Resolver.$loader
    - cb function now has signature (args, context)
    - cache is on by default and persists indefinitely (must be managed)
  * MongoClient now seperate NPM module @coderich/autograph-mongodb
  * No more pre|post Response event

---------

* select('author.*') // populate/hydrate (left join)
* where('author.name') // join

---------

[
  '$default', [input, doc] - Assign default value when undefined
  '$cast', [input, where] - Cast value to schema defined type
  '$normalize', [input] - Normalize the input
  '$instruct', [input, where] - Instruct value (will define attribute even if undefined)
  '$construct', [input] - On Create
  '$restruct', [input] - On Update
  '$serialize', [input, where] - transformations to db driver
  '$validate', [input] - After preMutation Before postMutation (validate fields)
]
